$date
	Wed Dec 25 10:54:13 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$scope module bibibi_cpu $end
$scope module ram_bibibi $end
$var wire 7 ! Addr [6:0] $end
$var wire 1 " R $end
$var wire 1 # W $end
$var wire 32 $ W_data [31:0] $end
$var wire 32 % R_data [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module testbench $end
$var reg 1 & test_clk $end
$scope module bibibi_cpu $end
$var wire 32 ' bus [31:0] $end
$var wire 1 & clk $end
$var wire 28 ( sig_ext_l [27:0] $end
$var wire 4 ) sig_ext_h [3:0] $end
$var wire 6 * opcode [5:0] $end
$var wire 32 + mem_out [31:0] $end
$var wire 32 , mem_in [31:0] $end
$var wire 7 - mem_addr [6:0] $end
$var wire 32 . mdr_in [31:0] $end
$var wire 3 / aluctrl [2:0] $end
$var wire 1 0 Zero $end
$var wire 1 1 RegWr $end
$var wire 2 2 RegSel [1:0] $end
$var wire 1 3 RegOe $end
$var wire 28 4 PC_out_l [27:0] $end
$var wire 4 5 PC_out_h [3:0] $end
$var wire 1 6 PCWr $end
$var wire 1 7 PCOel $end
$var wire 1 8 PCOeh $end
$var wire 1 9 OF $end
$var wire 1 # MemWr $end
$var wire 1 " MemRd $end
$var wire 1 : MemOe $end
$var wire 1 ; MDRWr $end
$var wire 1 < MDRSrc $end
$var wire 1 = MDROe $end
$var wire 1 > MARWr $end
$var wire 1 ? ImmOel $end
$var wire 1 @ ImmOeh $end
$var wire 32 A IR_out [31:0] $end
$var wire 1 B IRWr $end
$var wire 2 C ExtSel [1:0] $end
$var wire 32 D B_out [31:0] $end
$var wire 1 E BWr $end
$var wire 32 F A_out [31:0] $end
$var wire 1 G AWr $end
$var wire 32 H ALU_out [31:0] $end
$var wire 2 I ALUOp [1:0] $end
$var wire 1 J ALUOe $end
$var reg 5 K Reg_addr [4:0] $end
$scope module A $end
$var wire 1 & clk $end
$var wire 32 L in [31:0] $end
$var wire 1 G Wr $end
$var reg 32 M out [31:0] $end
$upscope $end
$scope module ALU_OUT $end
$var wire 32 N out [31:0] $end
$var wire 32 O in [31:0] $end
$var wire 1 J Ctrl $end
$upscope $end
$scope module B $end
$var wire 1 & clk $end
$var wire 32 P in [31:0] $end
$var wire 1 E Wr $end
$var reg 32 Q out [31:0] $end
$upscope $end
$scope module IR $end
$var wire 1 & clk $end
$var wire 32 R in [31:0] $end
$var wire 1 B Wr $end
$var reg 32 S out [31:0] $end
$upscope $end
$scope module MAR $end
$var wire 1 & clk $end
$var wire 7 T in [6:0] $end
$var wire 1 > Wr $end
$var reg 7 U out [6:0] $end
$upscope $end
$scope module MDR $end
$var wire 1 & clk $end
$var wire 32 V in [31:0] $end
$var wire 1 ; Wr $end
$var reg 32 W out [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 & clk $end
$var wire 32 X in [31:0] $end
$var wire 1 6 Wr $end
$var reg 32 Y out [31:0] $end
$upscope $end
$scope module PC_h $end
$var wire 4 Z in [3:0] $end
$var wire 4 [ out [3:0] $end
$var wire 1 8 Ctrl $end
$upscope $end
$scope module PC_l $end
$var wire 28 \ in [27:0] $end
$var wire 28 ] out [27:0] $end
$var wire 1 7 Ctrl $end
$upscope $end
$scope module RF_bibibi $end
$var wire 5 ^ Reg [4:0] $end
$var wire 32 _ W_data [31:0] $end
$var wire 1 & clk $end
$var wire 1 1 Wr $end
$var wire 1 3 OE $end
$var reg 32 ` R_data [31:0] $end
$upscope $end
$scope module Sig_Ext $end
$var wire 32 a in [31:0] $end
$var wire 2 b signal [1:0] $end
$var reg 4 c sig_ext_h [3:0] $end
$var reg 28 d sig_ext_l [27:0] $end
$upscope $end
$scope module Sig_Ext_h $end
$var wire 4 e in [3:0] $end
$var wire 4 f out [3:0] $end
$var wire 1 @ Ctrl $end
$upscope $end
$scope module Sig_Ext_l $end
$var wire 28 g in [27:0] $end
$var wire 28 h out [27:0] $end
$var wire 1 ? Ctrl $end
$upscope $end
$scope module alu_bibibi $end
$var wire 32 i a [31:0] $end
$var wire 32 j b [31:0] $end
$var wire 32 k sub_ab [31:0] $end
$var wire 1 l slt $end
$var wire 1 m oflow_sub $end
$var wire 1 n oflow_add $end
$var wire 32 o add_ab [31:0] $end
$var wire 1 0 Zero $end
$var wire 1 9 OF $end
$var wire 3 p ALUCtrl [2:0] $end
$var reg 32 q out [31:0] $end
$upscope $end
$scope module alucu $end
$var wire 6 r funct [5:0] $end
$var wire 2 s aluop [1:0] $end
$var reg 3 t _funct [2:0] $end
$var reg 3 u aluctl [2:0] $end
$upscope $end
$scope module mcu_bibibi $end
$var wire 32 v ALU_out [31:0] $end
$var wire 1 9 OF $end
$var wire 1 0 Zero $end
$var wire 1 & clk $end
$var wire 6 w opcode [5:0] $end
$var reg 1 J ALUOe $end
$var reg 2 x ALUOp [1:0] $end
$var reg 1 G AWr $end
$var reg 1 E BWr $end
$var reg 2 y ExtSel [1:0] $end
$var reg 1 B IRWr $end
$var reg 1 @ ImmOeh $end
$var reg 1 ? ImmOel $end
$var reg 1 > MARWr $end
$var reg 1 = MDROe $end
$var reg 1 < MDRSrc $end
$var reg 1 ; MDRWr $end
$var reg 1 : MemOe $end
$var reg 1 " MemRd $end
$var reg 1 # MemWr $end
$var reg 1 8 PCOeh $end
$var reg 1 7 PCOel $end
$var reg 1 6 PCWr $end
$var reg 1 3 RegOe $end
$var reg 2 z RegSel [1:0] $end
$var reg 1 1 RegWr $end
$var reg 4 { state [3:0] $end
$upscope $end
$scope module mem_r $end
$var wire 1 : Ctrl $end
$var wire 32 | out [31:0] $end
$var wire 32 } in [31:0] $end
$upscope $end
$scope module mem_w $end
$var wire 1 = Ctrl $end
$var wire 32 ~ in [31:0] $end
$var wire 32 !" out [31:0] $end
$upscope $end
$scope module ram_bibibi $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx !"
b0 ~
bx000xx000000000x000000000000000x }
bx |
b0 {
bx z
bx y
bx x
b0 w
b0 v
b0 u
b10 t
bx s
b0 r
b0 q
b0 p
b0 o
0n
0m
0l
b0 k
b0 j
b0 i
bx h
b0 g
bx f
b0 e
b0 d
b0 c
bx b
b0 a
bz `
bx _
b0 ^
bx ]
b0 \
bx [
b0 Z
b0 Y
bx X
b0 W
bx V
b0 U
bx T
b0 S
bx R
b0 Q
bx P
b0 O
bx N
b0 M
bx L
b0 K
xJ
bx I
b0 H
xG
b0 F
xE
b0 D
bx C
xB
b0 A
x@
x?
x>
x=
x<
x;
x:
09
x8
x7
x6
b0 5
b0 4
x3
bx 2
x1
10
b0 /
bx .
b0 -
b0 ,
bx000xx000000000x000000000000000x +
b0 *
b0 )
b0 (
bx '
0&
bx000xx000000000x000000000000000x %
b0 $
x#
x"
b0 !
$end
#5
b0 T
b0 .
b0 V
bz h
b0 '
b0 L
b0 N
b0 P
b0 R
b0 X
b0 _
b0 |
b0 !"
bz f
b0 ]
b0 [
b10001100000000010000000000000001 %
b10001100000000010000000000000001 +
b10001100000000010000000000000001 }
b10 /
b10 p
b10 u
b1 {
0;
0=
0<
1>
0:
0#
0"
b0 2
b0 z
01
03
0J
0E
1G
b0 I
b0 s
b0 x
b0 C
b0 b
b0 y
0?
0@
0B
06
17
18
1&
#10
0&
#15
b10001100000000010000000000000001 .
b10001100000000010000000000000001 V
b1 T
bz ]
bz [
b10001100000000010000000000000001 '
b10001100000000010000000000000001 L
b10001100000000010000000000000001 N
b10001100000000010000000000000001 P
b10001100000000010000000000000001 R
b10001100000000010000000000000001 X
b10001100000000010000000000000001 _
b10001100000000010000000000000001 |
b10001100000000010000000000000001 !"
b10 {
1:
1"
1B
0>
0G
07
08
1&
#20
b0 t
b1 (
b1 d
b1 g
b100011 r
b100011 *
b100011 w
b10001100000000010000000000000001 A
b10001100000000010000000000000001 S
b10001100000000010000000000000001 a
0&
#25
b1 h
b0 f
b1 .
b1 V
b1 T
b1 '
b1 L
b1 N
b1 P
b1 R
b1 X
b1 _
b1 |
b1 !"
b11 {
1E
b10 C
b10 b
b10 y
1?
1@
0:
0"
0B
1&
#30
00
b1 H
b1 O
b1 q
b1 v
1l
b11111111111111111111111111111111 k
b1 o
b1 D
b1 Q
b1 j
0&
#35
bz h
bz f
b100 {
1J
16
0E
b0 C
b0 b
b0 y
0?
0@
1&
#40
b1 4
b1 \
b1 Y
0&
#45
b0 .
b0 V
b0 T
b0 '
b0 L
b0 N
b0 P
b0 R
b0 X
b0 _
b0 |
b0 !"
b0 `
b101 {
13
1G
0J
06
1&
#50
0&
#55
b1 h
b0 f
b1 .
b1 V
b1 T
b1 '
b1 L
b1 N
b1 P
b1 R
b1 X
b1 _
b1 |
b1 !"
bz `
b110 {
1E
1?
1@
03
0G
1&
#60
0&
#65
bz h
bz f
b111 {
1>
1J
0E
0?
0@
1&
#70
b1010 %
b1010 +
b1010 }
b1 !
b1 -
b1 U
0&
#75
bz T
bz '
bz L
bz N
bz P
bz R
bz X
bz _
bz |
bz !"
b1010 .
b1010 V
b1000 {
1;
1<
1"
0>
0J
1&
#80
b1010 $
b1010 ,
b1010 W
b1010 ~
0&
#85
b1010 T
b1010 '
b1010 L
b1010 N
b1010 P
b1010 R
b1010 X
b1010 _
b1010 |
b1010 !"
b1 K
b1 ^
b1010 .
b1010 V
b0 {
11
b1 2
b1 z
1=
0;
0<
0"
1&
#90
0&
#95
b1 ]
b0 [
b1 .
b1 V
b1 T
b1 '
b1 L
b1 N
b1 P
b1 R
b1 X
b1 _
b1 |
b1 !"
b0 K
b0 ^
b1 {
1>
1G
17
18
0=
b0 2
b0 z
01
1&
#100
b10 H
b10 O
b10 q
b10 v
0l
b0 k
b10 o
b1 F
b1 M
b1 i
0&
